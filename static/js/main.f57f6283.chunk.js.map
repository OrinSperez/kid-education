{"version":3,"sources":["Componente/Top_bar.jsx","Componente/Videocard.jsx","App.js","serviceWorker.js","index.js"],"names":["Top_bar","className","id","href","height","width","src","Videocard","titulo","canal","Descripcion","Duracion","miniatura","fotocanal","class","proptype","Proptype","string","number","default","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAmCeA,G,KAhCC,kBACd,oCACE,4BAAQC,UAAU,eAGd,yBAEEA,UAAU,gDACVC,GAAG,QAEA,uBAAGC,KAAK,IAAIF,UAAU,eACzB,oCAEA,uBAAGE,KAAK,KACN,yBACEF,UAAU,cACVG,OAAO,KACPC,MAAM,KACNC,IAAI,oEAGR,uBAAGH,KAAK,KACN,yBAAKG,IAAI,MAEX,uBAAGH,KAAK,KACN,yBAAKG,IAAI,W,gBCxBfC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAOC,EAAV,EAAUA,MAAMC,EAAhB,EAAgBA,YAAYC,EAA5B,EAA4BA,SAASC,EAArC,EAAqCA,UAAUC,EAA/C,EAA+CA,UAA/C,OAChB,oCACA,uBAAGV,KAAK,KACN,6BAASD,GAAIM,EAAQM,MAAM,mBACzB,yBAAKA,MAAM,sDACT,yBAAKR,IAAKM,KAGZ,yBAAKE,MAAM,sBACT,4BAAKN,GACL,uBAAGM,MAAM,UAAUJ,IAErB,4BAAQI,MAAM,4DACZ,yBAAKA,MAAM,eACT,yBAAKA,MAAM,WACT,yBAAKR,IAAKO,MAGtB,uBAAGC,MAAM,UAAUL,GAEX,yBAAKK,MAAM,qBAAqBH,QAMxCJ,EAAUQ,SAAS,CACfP,OAAOQ,IAASC,OAChBL,UAAUI,IAASC,OACnBP,YAAYM,IAASC,OACrBJ,UAAUG,IAASC,OACnBR,MAAMO,IAASC,OACfN,SAASK,IAASE,QAItBX,EAAUY,QAAQ,CACdX,OAAO,+BACPI,UAAU,0BACVF,YAAY,8BACZG,UAAU,8BACVJ,MAAM,qBACNE,SAAS,GAIEJ,QCzBAa,EAhBJ,kBACT,oCACA,kBAAC,EAAD,MACA,yBAAKnB,UAAU,uCACb,iCAAM,kBAAC,EAAD,CAAWO,OAAO,GAAGE,YAAY,GAAGD,MAAM,GAAGI,UAAU,SCD7CQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f57f6283.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../style/style.scss\";\r\n\r\nconst Top_bar = () => (\r\n  <>\r\n    <header className=\"main-header\">\r\n\r\n       \r\n        <div\r\n\r\n          className=\"lg-center ed-grid s-grid-3 m-grid-3 lg-grid-3\"\r\n          id=\"icon\"\r\n        >\r\n             <a href=\"#\" className=\"lg-left row\">\r\n          <h1>Kid</h1>\r\n        </a>\r\n          <a href=\"#\">\r\n            <img\r\n              className=\"s-10 s-mr-1\"\r\n              height=\"23\"\r\n              width=\"23\"\r\n              src=\"https://www.flaticon.com/svg/static/icons/svg/1384/1384060.svg\"\r\n            />\r\n          </a>\r\n          <a href=\"#\">\r\n            <img src=\"\" />\r\n          </a>\r\n          <a href=\"#\">\r\n            <img src=\"\" />\r\n          </a>\r\n        </div>\r\n\r\n    </header>\r\n  </>\r\n);\r\nexport default Top_bar;\r\n","import React from \"react\";\r\nimport \"../style/style.scss\";\r\nimport Proptype from  \"prop-types\";\r\n\r\nconst Videocard = ({ titulo,canal,Descripcion,Duracion,miniatura,fotocanal }) => (\r\n  <>\r\n  <a href=\"#\">\r\n    <article id={titulo} class=\"s-shadow-bottom\">\r\n      <div class=\"s-ratio-16-9 img-container s-radius-tl s-radius-tr\">\r\n        <img src={miniatura}/>\r\n      </div>\r\n\r\n      <div class=\"s-bg-white s-pxy-2\">\r\n        <h3>{titulo}</h3>\r\n        <p class=\"s-mb-0\">{Descripcion}</p>\r\n      </div>\r\n      <footer class=\"s-cross-center s-bg-grey s-pxy-2 s-radius-br s-radius-bl\">\r\n        <div class=\"s-10 s-mr-1\">\r\n          <div class=\"circle \">\r\n            <img src={fotocanal} />\r\n          </div>\r\n        </div>\r\n<p class=\"s-mb-0\">{canal}</p>\r\n\r\n        <div class=\"button s-to-right\">{Duracion}</div>\r\n      </footer>\r\n    </article>\r\n    </a>\r\n  </>\r\n);\r\nVideocard.proptype={\r\n    titulo:Proptype.string,\r\n    miniatura:Proptype.string,\r\n    Descripcion:Proptype.string,\r\n    fotocanal:Proptype.string,\r\n    canal:Proptype.string,\r\n    Duracion:Proptype.number\r\n\r\n\r\n}\r\nVideocard.default={\r\n    titulo:\"Todavia no existen un titulo\",\r\n    miniatura:\"Todavia no hay una foto\",\r\n    Descripcion:\"No contiene una descripcion\",\r\n    fotocanal:\"Este canal no contiene foto\",\r\n    canal:\"No existe un canal\",\r\n    Duracion:0,\r\n\r\n}\r\n\r\nexport default Videocard;\r\n","import React from 'react';\nimport \"./style/style.scss\";\nimport Top_bar from \"./Componente/Top_bar\";\nimport Videocard from \"./Componente/Videocard\"\n//import Videojs from 'video.js';\n\n\n\n\nconst App =()=>(\n  <>\n  <Top_bar />\n  <div className=\"ed-grid s-grid-1 m-grid-2 lg-grid-3\">\n    <div> <Videocard titulo=\"\" Descripcion=\"\" canal=\"\" fotocanal=\"\" /></div>\n  \n\n\n  </div>\n \n  \n\n  \n  </>\n\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}